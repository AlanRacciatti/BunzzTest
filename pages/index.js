import Head from 'next/head'
import styles from '../styles/Home.module.css'
import bunzz from 'bunzz-sdk'
import { DAPP_ID, API_KEY, MODULE_NAME } from '../config.json'
import { PureComponent, useEffect, useState } from 'react'

export default function Home() {

  const [handler, setHandler] = useState(null)
  const [contract, setContract] = useState(null)
  const [totalSupply, setTotalSupply] = useState(0)
  const [isOwner, setIsOwner] = useState(false)
  const [isWhitelisted, setIsWhitelisted] = useState(false)

  async function createConnection() {
    const connection = await bunzz.initWithConnect({
      dappId: DAPP_ID,
      apiKey: API_KEY,
    });

    setHandler(connection)
  }

  useEffect(() => {
    if (handler) {
      setContract(handler.getContract(MODULE_NAME))
    }
  }, [handler])

  useEffect(() => {
    if (contract) {
      updateTotalSupply()
      updateIsOwner()
      updateIsWhitelisted()
    }
  }, [contract])

  const updateTotalSupply = async () => {
    setTotalSupply(+(await contract.totalSupply()).data)
  }

  const updateIsWhitelisted = async () => {
    const groupNumber = +prompt("From which group you want to mint an NFT?")
    const userAddress = await handler.getSignerAddress()
    setIsWhitelisted((await contract.isWhitelisted(userAddress, groupNumber)).data)
  }

  const updateIsOwner = async () => {
    const { data: owner } = await contract.owner()
    const user = await handler.getSignerAddress()
    setIsOwner(owner == user)
  }

  const whitelistUser = async () => {
    const address = prompt("Insert the address to be whitelisted")
    const groupNumber = prompt("Insert the group in which you will whitelist the user")
    await contract.whitelistUsers([address], groupNumber)
  }

  const mintNft = async () => {
    await contract.mint(1, { value: 1 })
  }

  const switchToWhitelistSale = async () => {
    const groupNumber = +prompt("Insert the group number to modify")
    await contract.setOnlyWhitelisted(true, groupNumber)
  }

  const switchToPublicSale = async () => {
    const groupNumber = +prompt("Insert the group number to modify")
    await contract.setOnlyWhitelisted(false, groupNumber)
  }

  const changeCost = async () => {
    await contract.setCost(1, 1)
  }

  const pause = async () => {
    const groupNumber = +prompt("Insert the group to pause")
    await contract.pause(true, groupNumber)
  }

  const reveal = async () => {
    const groupNumber = +prompt("Insert the group to pause")
    await contract.reveal(groupNumber)
  }

  const createGroup = async () => {
    const baseUri = prompt("Base uri")
    const notRevealedUri = prompt("Not revealed uri")
    const amount = +prompt("Amount")
    const cost = +prompt("Cost (WEI)")
    const nftPerAddressLimit = +prompt("Max NFTs by address")

    if (baseUri && notRevealedUri && amount && cost && nftPerAddressLimit) {
      await contract.allocateNewGroup(baseUri, notRevealedUri, amount, cost, nftPerAddressLimit)
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Bunzz test</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Bunzz test
        </h1>
        {!handler && <button className={styles.connectButton} onClick={createConnection}>Connect wallet</button>}
        {isOwner && <p>You are the owner of the contract :D</p>}
        {isWhitelisted && <p>You are whitelisted :D</p>}
        {handler &&
          <p>Next token ID: {totalSupply + 1}</p>
        }
        {(handler && isWhitelisted) && <button className={styles.connectButton} onClick={mintNft}>Mint NFT (whitelist)</button>}
        {handler && <button className={styles.connectButton} onClick={mintNft}>Mint NFT</button>}
        {isOwner && <button className={styles.ownerButton} onClick={whitelistUser}>Whitelist user</button>}
        {isOwner && <button className={styles.ownerButton} onClick={switchToWhitelistSale}>Switch to whitelist sale</button>}
        {isOwner && <button className={styles.ownerButton} onClick={switchToPublicSale}>Switch to public sale</button>}
        {isOwner && <button className={styles.ownerButton} onClick={changeCost}>Change cost</button>}
        {isOwner && <button className={styles.ownerButton} onClick={reveal}>Reveal group</button>}
        {isOwner && <button className={styles.ownerButton} onClick={pause}>Pause</button>}
        {isOwner && <button className={styles.ownerButton} onClick={createGroup}>Create new group</button>}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Made by Chiin
        </a>
      </footer>
    </div>
  )
}
